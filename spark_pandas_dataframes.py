# -*- coding: utf-8 -*-
"""spark_pandas_dataframes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dE-fm_KxOpRHoK_irZvcVSz8OJ5qCffp

Mount your google drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import libraries and set data path"""

import numpy as np
import pandas as pd
# data_path = "/content/sample_data/nf2.json"
data_path = "/content/drive/MyDrive/Colab Notebooks/nf2.json"

"""Install Spark"""

pip install pyspark

"""Import Spark classes and methods"""

from pyspark.sql import SparkSession
from pyspark.sql import SQLContext
from pyspark.sql.functions import sum, col, desc
from pyspark.sql.types import *

"""Create a Spark Session"""

session = SparkSession.builder.master("local").appName("Dataframes").getOrCreate()

"""Create a Spark dataframe from the data"""

df = session.read.json(data_path, multiLine=True)

"""Show the first 10 elements of the dataframe"""

df.show(10)

"""Show the dataframe's schema"""

df.printSchema()

"""Show some statistical information about the dataframe"""

df.describe().show()

"""Create a new dataframe containing the number of films for each year appearing in the dataframe"""

years = df.groupBy(df['release_year']).count().sort(desc("release_year"))
years.show(10)

"""Trnsform the Spark dataframe to a Pandas dataframe"""

years_pd = years.toPandas()
years_pd

"""Plot the Pandas dataframe to see the distribution of films by year"""

from matplotlib import pyplot as plt
years_pd.plot(kind='scatter', x='release_year', y='count', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

"""Create a new dataframe containing only the columns title and cast from the original dataframe"""

df_selected = df.select(df.title, df.cast)
df_selected.show(10)

"""Filter the original dataframe to a new one containing only irows with the name John in the cast column"""

df_filtered = df.filter(df.cast.contains("John"))

"""Show first 10 elements of the cast coulumn in the filtered dataframe without truncating the output (second argument set to False means that the output will not be truncated)"""

df_filtered.select(df.cast).show(10, False)

"""Pick a certain element of the cast column"""

selected_cast = df_filtered.select(df.cast).collect()[2]
selected_cast

"""Take the value of the row as a string"""

selected_cast[0]

"""**The following is my code for task 3 "Find the actor that appears most often in the database."
Diana Carolina Salazar Velandia**
"""

df_selectedCast = df.select(df.cast)
df_selectedCast.show(10, False)

from pyspark.sql import functions as F
dfAgrupado = df.groupBy(F.col("cast")).count()
dfAgrupado.show(10, False)

#years = df.groupBy(df['release_year']).count().sort(desc("release_year"))
#years.show(10)
casting = df.groupBy(df['cast']).count().sort(desc("cast"))
cast_pd = casting.toPandas()
cast_pd
n_mas_repetido = cast_pd['cast'].value_counts().idxmax()
print(n_mas_repetido)

cast_pd

casting = df.groupBy(df['cast']).count().sort(desc("cast"))
cast_pd = casting.toPandas()
cast_pd
df_individual= cast_pd['cast'].str.split(', ').explode()
n_mas_repetido = df_individual.value_counts().idxmax()
print(n_mas_repetido)

castingyear = df.groupBy(df['cast'], df['release_year']).count().sort(desc("release_year"))
castyear_pd = castingyear.toPandas()
castyear_pd
#df_individualyear= castyear_pd['cast'].str.split(', ').explode()
#n_mas_repetido = df_individualyear.value_counts().idxmax()
#print(n_mas_repetido)



#convierte el dataframe de cast en una lista
dfCast = df_selectedCast.select("cast").rdd.flatMap(lambda x: x).collect()
dfCast

df_selectedCast.show(10)

actors = df.groupBy(df['cast']).count().sort(desc('count'))
actors.show(2)

"""**Find the most popular genre among the movies (not TV series)**"""

movie = df.filter(df.type.contains("Movie"))
popular_G = movie.groupBy(movie['listed_in']).count().sort(desc("count"))
popular_G.show(1, False)

"""**Plot the most popular actorâ€™s number of appearances by year.**

"""

actors_l = df.groupBy(df['cast']).count().sort(desc('cast'))
actors_pd = actors_l.toPandas()
print(type(actors_pd))
actors_pd
lista_1 = actors_pd['cast'].tolist()
if "," in lista_1:
 lista_2 = lista_1.remove(",")
lista_2
#split_list = [item.split() for item in lista_2]
#print(split_list)

#print(lista_1, type(lista_1))
#contador = Counter(lista_1)
#repetido = contador.most_common(3)
#lista = pd.Series(cast_str)
#result = lista.value_counts()
#print(repetido)
#print(max(set(lista_1), key= lista_1.count))

df_cast = df.select(df.cast, df.release_year)
df_cast.show(10, False)
years = df_cast.groupBy(df_cast['cast']).count()
years.show(10)

